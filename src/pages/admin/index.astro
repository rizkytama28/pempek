---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Admin Dashboard">
    <div id="admin-dashboard" class="min-h-screen bg-background text-text-main hidden">
        <!-- Header -->
        <header class="bg-surface shadow">
            <div class="container mx-auto px-4 py-4 flex justify-between items-center">
                <h1 class="text-xl font-bold">Admin Dashboard</h1>
                <div class="flex items-center">
                    <span id="user-email" class="text-sm mr-4"></span>
                    <button id="logout-btn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded text-sm">Logout</button>
                </div>
            </div>
        </header>
        <!-- Main Content -->
        <main class="container mx-auto p-4">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold">Kelola Menu</h2>
                <button id="add-menu-btn" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">+ Tambah Menu Baru</button>
            </div>
            <div id="menu-table-container" class="bg-surface p-4 rounded-lg border border-background"></div>

            <!-- Kelola Kategori Section -->
            <div class="mt-12">
                <h2 class="text-2xl font-bold mb-6">Kelola Kategori</h2>
                <div id="category-list-container" class="bg-surface p-4 rounded-lg border border-background">
                    <!-- Category list will be rendered here by JavaScript -->
                </div>
            </div>
        </main>
    </div>

    <!-- Modal untuk Tambah/Edit Menu -->
    <div id="menu-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50 overflow-y-auto py-10">
        <div class="bg-surface p-8 rounded-lg shadow-lg w-full max-w-md border border-background">
            <h2 id="modal-title" class="text-2xl font-bold mb-6"></h2>
            <form id="menu-form">
                <input type="hidden" id="menu-id" name="id">
                <input type="hidden" id="existing-image-url" name="existing_image_url">
                <div class="space-y-4">
                    <div>
                        <label for="name" class="block text-sm font-medium text-text-main/80 mb-2">Nama Menu</label>
                        <input type="text" id="name" name="name" required class="w-full bg-background border border-surface rounded-md p-2">
                    </div>
                    <div>
                        <label for="price" class="block text-sm font-medium text-text-main/80 mb-2">Harga</label>
                        <input type="number" id="price" name="price" required class="w-full bg-background border border-surface rounded-md p-2">
                    </div>
                    <div>
                        <label for="description" class="block text-sm font-medium text-text-main/80 mb-2">Deskripsi</label>
                        <textarea id="description" name="description" rows="3" class="w-full bg-background border border-surface rounded-md p-2"></textarea>
                    </div>
                    <div>
                        <div class="flex justify-between items-center mb-2">
                            <label for="category" class="block text-sm font-medium text-text-main/80">Kategori</label>
                            <button type="button" id="show-add-category-btn" class="text-primary hover:text-primary/80 text-xs font-bold">+ Kategori Baru</button>
                        </div>
                        <select id="category" name="category_id" required class="w-full bg-background border border-surface rounded-md p-2"></select>
                        <div id="add-category-form-container" class="hidden mt-2 p-3 bg-background/50 rounded-md">
                            <input type="text" id="new-category-name" placeholder="Nama Kategori Baru" class="w-full bg-surface border-background rounded-md p-2 text-sm">
                            <input type="text" id="new-category-slug" placeholder="slug-kategori-baru" class="w-full bg-surface border-background rounded-md p-2 mt-2 text-sm">
                            <div class="flex justify-end space-x-2 mt-2">
                                <button type="button" id="cancel-add-category-btn" class="bg-gray-500 hover:bg-gray-600 text-white px-3 py-1 rounded-md text-xs">Batal</button>
                                <button type="button" id="save-category-btn" class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded-md text-xs font-bold">Simpan</button>
                            </div>
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-text-main/80 mb-2">Gambar Menu</label>
                        <div id="image-preview-wrapper" class="relative w-32 mb-2 hidden">
                            <img id="image-preview" src="" alt="Image preview" class="w-32 h-32 object-cover rounded-md"/>
                            <button type="button" id="remove-image-btn" class="absolute top-0 right-0 bg-red-600 text-white rounded-full w-6 h-6 flex items-center justify-center -mt-2 -mr-2 hover:bg-red-700 transition-transform transform hover:scale-110">&times;</button>
                        </div>
                        <input type="file" id="image-file" name="image" accept="image/*" class="w-full text-sm text-text-main/60 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-background hover:file:bg-primary/90"/>
                        <p class="text-xs text-gray-500 mt-1">Kosongkan jika tidak ingin mengubah gambar.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-text-main/80 mb-2">Status</label>
                        <label class="relative inline-flex items-center cursor-pointer">
                            <input type="checkbox" id="available" name="available" class="sr-only peer">
                            <div class="w-11 h-6 bg-gray-600 rounded-full peer peer-checked:after:translate-x-full after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                            <span class="ml-3 text-sm font-medium text-text-main">Tersedia</span>
                        </label>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-text-main/80 mb-2">Best Seller</label>
                        <label class="relative inline-flex items-center cursor-pointer">
                            <input type="checkbox" id="is_best_seller" name="is_best_seller" class="sr-only peer">
                            <div class="w-11 h-6 bg-gray-600 rounded-full peer peer-checked:after:translate-x-full after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-amber-500"></div>
                            <span class="ml-3 text-sm font-medium text-text-main">Jadikan Best Seller</span>
                        </label>
                    </div>
                </div>
                <div class="flex justify-end space-x-4 mt-6">
                    <button type="button" id="cancel-btn" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">Batal</button>
                    <button type="submit" id="submit-menu-btn" class="bg-primary hover:bg-primary/90 text-background font-bold py-2 px-4 rounded">Simpan</button>
                </div>
            </form>
        </div>
    </div>
</Layout>

<script>
    // Script tidak berubah, hanya class di HTML yang diubah
    import { supabase } from '../../lib/supabase';

    const userEmailEl = document.getElementById('user-email');
    const adminDashboardEl = document.getElementById('admin-dashboard');
    const menuTableContainerEl = document.getElementById('menu-table-container');
    const categoryListContainerEl = document.getElementById('category-list-container');
    const menuModal = document.getElementById('menu-modal');
    const modalTitle = document.getElementById('modal-title');
    const menuForm = document.getElementById('menu-form') as HTMLFormElement;
    const cancelBtn = document.getElementById('cancel-btn');
    const addMenuBtn = document.getElementById('add-menu-btn');
    const categorySelect = document.getElementById('category') as HTMLSelectElement;
    const showAddCategoryBtn = document.getElementById('show-add-category-btn');
    const addCategoryContainer = document.getElementById('add-category-form-container');
    const saveCategoryBtn = document.getElementById('save-category-btn');
    const cancelAddCategoryBtn = document.getElementById('cancel-add-category-btn');
    const menuIdInput = document.getElementById('menu-id') as HTMLInputElement;
    const availableCheckbox = document.getElementById('available') as HTMLInputElement;
    const bestSellerCheckbox = document.getElementById('is_best_seller') as HTMLInputElement;
    const imageFileInput = document.getElementById('image-file') as HTMLInputElement;
    const imagePreviewWrapper = document.getElementById('image-preview-wrapper');
    const imagePreview = document.getElementById('image-preview') as HTMLImageElement;
    const removeImageBtn = document.getElementById('remove-image-btn');
    const existingImageUrlInput = document.getElementById('existing-image-url') as HTMLInputElement;
    const submitMenuBtn = document.getElementById('submit-menu-btn');

    async function fetchCategories(selectAfterFetch = null) {
        const { data, error } = await supabase.from('categories').select('id, name').order('name');
        if (!error && data) {
            categorySelect.innerHTML = data.map(cat => `<option value="${cat.id}">${cat.name}</option>`).join('');
            if (selectAfterFetch) { categorySelect.value = selectAfterFetch; }
        }
    }

    async function fetchAndDisplayCategories() {
        categoryListContainerEl.innerHTML = '<p>Memuat data kategori...</p>';
        const { data: categories, error } = await supabase.from('categories').select('id, name').order('name');

        if (error) {
            categoryListContainerEl.innerHTML = `<p class="text-red-500">Error: ${error.message}</p>`;
            return;
        }
        if (!categories || categories.length === 0) {
            categoryListContainerEl.innerHTML = '<p>Belum ada kategori.</p>';
            return;
        }

        const listHtml = `
            <ul class="space-y-2">
                ${categories.map(cat => `
                    <li class="flex justify-between items-center p-2 rounded-md bg-background">
                        <span>${cat.name}</span>
                        <button data-id="${cat.id}" data-name="${cat.name}" class="delete-category-btn bg-red-600 hover:bg-red-700 text-white font-bold py-1 px-2 rounded text-xs">
                            Hapus
                        </button>
                    </li>
                `).join('')}
            </ul>
        `;
        categoryListContainerEl.innerHTML = listHtml;
    }

    function openModalForCreate() {
        menuForm.reset();
        menuIdInput.value = '';
        modalTitle.textContent = 'Tambah Menu Baru';
        availableCheckbox.checked = true;
        bestSellerCheckbox.checked = false;
        imagePreviewWrapper.classList.add('hidden');
        imageFileInput.value = '';
        menuModal.classList.remove('hidden');
    }

    async function openModalForEdit(id) {
        const { data: menu, error } = await supabase.from('menus').select('*').eq('id', id).single();
        if (error || !menu) { alert('Gagal mengambil data menu!'); return; }
        menuForm.reset();
        menuIdInput.value = menu.id;
        existingImageUrlInput.value = menu.image_url;
        modalTitle.textContent = 'Edit Menu';
        (document.getElementById('name') as HTMLInputElement).value = menu.name;
        (document.getElementById('price') as HTMLInputElement).value = menu.price;
        (document.getElementById('description') as HTMLTextAreaElement).value = menu.description;
        categorySelect.value = menu.category_id;
        availableCheckbox.checked = menu.available;
        bestSellerCheckbox.checked = menu.is_best_seller;
        imageFileInput.value = '';
        if (menu.image_url) {
            imagePreview.src = menu.image_url;
            imagePreviewWrapper.classList.remove('hidden');
        } else {
            imagePreviewWrapper.classList.add('hidden');
        }
        menuModal.classList.remove('hidden');
    }

    function closeModal() { menuModal.classList.add('hidden'); }

    async function fetchAndDisplayMenus() {
        menuTableContainerEl.innerHTML = '<p>Memuat data menu...</p>';
        const { data: menus, error } = await supabase.from('menus').select('*, categories(name)').order('id', { ascending: true });
        if (error) { menuTableContainerEl.innerHTML = `<p class="text-red-500">Error: ${error.message}</p>`; return; }
        if (!menus || menus.length === 0) { menuTableContainerEl.innerHTML = '<p>Belum ada menu.</p>'; return; }
        
        const listHtml = `
            <div class="w-full">
                <!-- Table Header (Desktop) -->
                <div class="hidden md:grid md:grid-cols-6 md:gap-4 font-bold border-b border-surface p-2">
                    <div class="col-span-2">Nama</div>
                    <div>Harga</div>
                    <div>Status</div>
                    <div class="col-span-2">Aksi</div>
                </div>
                <!-- Menu Items -->
                <div class="space-y-4 md:space-y-0">
                    ${menus.map(menu => `
                        <div class="grid grid-cols-2 md:grid-cols-6 gap-4 items-center bg-background md:bg-transparent p-4 md:p-2 rounded-lg md:rounded-none border md:border-0 md:border-b border-surface">
                            
                            <!-- Name & Image (Mobile) / Name (Desktop) -->
                            <div class="col-span-2 md:col-span-2 flex items-center space-x-3">
                                <img src="${menu.image_url ? menu.image_url + '?width=100&height=100&resize=cover' : '/images/placeholder.jpg'}" alt="${menu.name}" class="w-16 h-16 object-cover rounded-md"/>
                                <span>${menu.name}</span>
                            </div>

                            <!-- Price (with label on mobile) -->
                            <div class="col-span-2 md:col-span-1">
                                <span class="md:hidden font-semibold">Harga: </span>
                                <span>Rp ${menu.price.toLocaleString('id-ID')}</span>
                            </div>

                            <!-- Status (with label on mobile) -->
                            <div class="col-span-2 md:col-span-1">
                                <span class="md:hidden font-semibold">Status: </span>
                                ${menu.available ? '<span class="bg-green-500/20 text-green-300 text-xs font-medium px-2.5 py-0.5 rounded-full">Tersedia</span>' : '<span class="bg-red-500/20 text-red-300 text-xs font-medium px-2.5 py-0.5 rounded-full">Habis</span>'}
                            </div>

                            <!-- Actions -->
                            <div class="col-span-2 md:col-span-2 flex space-x-2">
                                <button data-id="${menu.id}" class="edit-btn bg-blue-600 hover:bg-blue-700 text-white font-bold py-1 px-3 rounded text-xs">Edit</button>
                                <button data-id="${menu.id}" data-name="${menu.name}" class="delete-btn bg-red-600 hover:bg-red-700 text-white font-bold py-1 px-3 rounded text-xs">Hapus</button>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
        menuTableContainerEl.innerHTML = listHtml;
    }

    async function checkSession() {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) { window.location.href = '/admin/login'; }
        else {
            userEmailEl.textContent = `Login sebagai: ${user.email}`;
            adminDashboardEl.classList.remove('hidden');
            await fetchCategories();
            await fetchAndDisplayMenus();
            await fetchAndDisplayCategories();
        }
    }

    addMenuBtn.addEventListener('click', openModalForCreate);
    cancelBtn.addEventListener('click', closeModal);
    showAddCategoryBtn.addEventListener('click', () => { categorySelect.classList.add('hidden'); showAddCategoryBtn.classList.add('hidden'); addCategoryContainer.classList.remove('hidden'); });
    cancelAddCategoryBtn.addEventListener('click', () => { categorySelect.classList.remove('hidden'); showAddCategoryBtn.classList.remove('hidden'); addCategoryContainer.classList.add('hidden'); });
    imageFileInput.addEventListener('change', () => { const file = imageFileInput.files[0]; if (file) { imagePreview.src = URL.createObjectURL(file); imagePreviewWrapper.classList.remove('hidden'); } });
    removeImageBtn.addEventListener('click', () => { imageFileInput.value = ''; existingImageUrlInput.value = ''; imagePreviewWrapper.classList.add('hidden'); });

    saveCategoryBtn.addEventListener('click', async () => {
        const nameInput = document.getElementById('new-category-name') as HTMLInputElement;
        const slugInput = document.getElementById('new-category-slug') as HTMLInputElement;
        if (!nameInput.value || !slugInput.value) { alert('Nama dan slug kategori tidak boleh kosong.'); return; }
        const { data, error } = await supabase.from('categories').insert({ name: nameInput.value, slug: slugInput.value }).select().single();
        if (error) { alert(`Gagal menyimpan kategori: ${error.message}`); }
        else if (data) {
            nameInput.value = ''; slugInput.value = '';
            addCategoryContainer.classList.add('hidden');
            categorySelect.classList.remove('hidden');
            showAddCategoryBtn.classList.remove('hidden');
            await fetchCategories(data.id);
            await fetchAndDisplayCategories();
        }
    });

    menuForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        submitMenuBtn.setAttribute('disabled', 'true');
        submitMenuBtn.textContent = 'Menyimpan...';
        const formData = new FormData(menuForm);
        const id = formData.get('id');
        let imageUrl = formData.get('existing_image_url') as string;

        try {
            const imageFile = imageFileInput.files[0];
            if (imageFile) {
                const fileName = `${Date.now()}-${imageFile.name}`;
                const { error: uploadError } = await supabase.storage.from('menu-images').upload(fileName, imageFile);
                if (uploadError) throw new Error(`Gagal upload file: ${uploadError.message}`);
                const { data: urlData } = supabase.storage.from('menu-images').getPublicUrl(fileName);
                imageUrl = urlData.publicUrl;
            } else if (existingImageUrlInput.value === '') {
                imageUrl = null;
            }

            const menuData = { 
                name: formData.get('name'), 
                price: formData.get('price'), 
                description: formData.get('description'), 
                category_id: formData.get('category_id'), 
                available: availableCheckbox.checked, 
                is_best_seller: bestSellerCheckbox.checked,
                image_url: imageUrl 
            };
            const { error } = id ? await supabase.from('menus').update(menuData).match({ id }) : await supabase.from('menus').insert(menuData);
            if (error) throw error;
            closeModal();
            fetchAndDisplayMenus();
        } catch (error) {
            alert(`Error: ${error.message}`);
        } finally {
            submitMenuBtn.removeAttribute('disabled');
            submitMenuBtn.textContent = 'Simpan';
        }
    });

    menuTableContainerEl.addEventListener('click', async (e) => {
        const target = e.target as HTMLElement;
        const id = target.dataset.id;
        if (target.classList.contains('edit-btn')) { openModalForEdit(id); }
        else if (target.classList.contains('delete-btn')) {
            const menuName = target.dataset.name;
            if (window.confirm(`Yakin mau menghapus menu "${menuName}"?`)) {
                await supabase.from('menus').delete().match({ id });
                fetchAndDisplayMenus();
            }
        }
    });

    categoryListContainerEl.addEventListener('click', async (e) => {
        const target = e.target as HTMLElement;
        if (target.classList.contains('delete-category-btn')) {
            const id = target.dataset.id;
            const name = target.dataset.name;

            if (window.confirm(`Yakin mau menghapus kategori "${name}"? Menghapus kategori mungkin gagal jika masih digunakan oleh menu.`)) {
                const { error } = await supabase.from('categories').delete().match({ id });

                if (error) {
                    alert(`Gagal menghapus kategori: ${error.message}. Pastikan tidak ada menu yang menggunakan kategori ini.`);
                } else {
                    // Refresh both lists
                    await fetchAndDisplayCategories();
                    await fetchCategories(); // This re-populates the dropdown in the modal
                }
            }
        }
    });

    document.getElementById('logout-btn').addEventListener('click', async () => {
        await supabase.auth.signOut();
        window.location.href = '/admin/login';
    });

    checkSession();

</script>